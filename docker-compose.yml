services:

  #  zookeeper:
  #    image: confluentinc/cp-zookeeper:latest
  #    restart: on-failure
  #    hostname: zookeeper
  #    container_name: zookeeper
  #    healthcheck:
  #      test: echo srvr | nc zookeeper 2181 || exit 1
  #      retries: 20
  #      interval: 10s
  #    ports:
  #      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
  #      - "2181:2181"
  #    environment:
  #      ZOOKEEPER_CLIENT_PORT: 2181
  #      ZOOKEEPER_TICK_TIME: 2000
  #      ZOOKEEPER_SECURE_CLIENT_PORT: ${ZOOKEEPER_PORT}
  #      ZOOKEEPER_SERVER_CNXN_FACTORY: org.apache.zookeeper.server.NettyServerCnxnFactory
  #      ZOOKEEPER_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/zookeeper.keystore.jks
  #      ZOOKEEPER_SSL_KEYSTORE_PASSWORD: ${SSL_KEYSTORE_PASSWORD}
  #      ZOOKEEPER_SSL_KEYSTORE_TYPE: PKCS12
  #      ZOOKEEPER_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/zookeeper.truststore.jks
  #      ZOOKEEPER_SSL_TRUSTSTORE_PASSWORD: ${SSL_TRUSTSTORE_PASSWORD}
  #      ZOOKEEPER_SSL_TRUSTSTORE_TYPE: JKS
  #      ZOOKEEPER_DEBUG_LOGGING: true
  #      ZOOKEEPER_SSL_ENABLED_PROTOCOLS: TLSv1.2
  #
  #      # TLS 1.2 is the tested-default - TLS 1.3 has not been tested for production
  #      # You can evaluate TLS 1.3 for ZooKeeper by uncommenting the following two properties
  #      # and setting KAFKA_ZOOKEEPER_SSL_PROTOCOL on brokers
  #      #ZOOKEEPER_SSL_ENABLED_PROTOCOLS: TLSv1.3,TLSv1.2
  #      #ZOOKEEPER_SSL_QUORUM_ENABLED_PROTOCOLS: TLSv1.3,TLSv1.2
  #
  #      ZOOKEEPER_SSL_CIPHER_SUITES: ${SSL_CIPHER_SUITES}
  #      ZOOKEEPER_SSL_CLIENT_AUTH: need
  #      ZOOKEEPER_AUTH_PROVIDER_X509: org.apache.zookeeper.server.auth.X509AuthenticationProvider
  #      ZOOKEEPER_AUTH_PROVIDER_SASL: org.apache.zookeeper.server.auth.SASLAuthenticationProvider
  #    volumes:
  #      - ./secrets:/etc/kafka/secrets
  #      - ./docker/zookeeper-data:/var/lib/zookeeper/log
  #      - ./docker/zookeeper-txn:/var/lib/zookeeper/data

  #  kafka:
  #    image: confluentinc/cp-kafka:latest
  #    hostname: kafka
  #    container_name: kafka
  #    depends_on:
  #      - zookeeper
  #    ports:
  #      - "${KAFKA_PORT}:${KAFKA_PORT}"  # HOST:CONTAINER, using environment variable for Kafka port
  #      - 9093:9093
  #      - 9094:9094
  #    environment:
  #      KAFKA_BROKER_ID: 1
  #
  #      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:${ZOOKEEPER_PORT}"
  #      KAFKA_ZOOKEEPER_SSL_CLIENT_ENABLE: 'true'
  #      # Broker uses TLSv1.2 by-default for ZooKeeper TLS connections
  #      # See note for ZOOKEEPER_SSL_ENABLED_PROTOCOLS regarding TLS 1.3 support
  #      # Uncomment the following property to evaluate TLS 1.3 for Broker<->ZooKeeper
  #      #KAFKA_ZOOKEEPER_SSL_PROTOCOL: TLSv1.3
  #      KAFKA_ZOOKEEPER_SSL_CIPHER_SUITES: ${SSL_CIPHER_SUITES}
  #      KAFKA_ZOOKEEPER_CLIENT_CNXN_SOCKET: org.apache.zookeeper.ClientCnxnSocketNetty
  #      KAFKA_ZOOKEEPER_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.keystore.jks
  #      KAFKA_ZOOKEEPER_SSL_KEYSTORE_PASSWORD: ${SSL_KEYSTORE_PASSWORD}
  #      KAFKA_ZOOKEEPER_SSL_KEYSTORE_TYPE: PKCS12
  #      KAFKA_ZOOKEEPER_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka.truststore.jks
  #      KAFKA_ZOOKEEPER_SSL_TRUSTSTORE_PASSWORD: ${SSL_TRUSTSTORE_PASSWORD}
  #      KAFKA_ZOOKEEPER_SSL_TRUSTSTORE_TYPE: JKS
  #
  #      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
  #      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,SSL:SSL,SSL_EXTERNAL:SSL
  #      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9093,SSL://kafka:${KAFKA_PORT},SSL_EXTERNAL://localhost:9094
  #      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093,SSL://0.0.0.0:${KAFKA_PORT},SSL_EXTERNAL://0.0.0.0:9094
  #
  #      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
  #
  #      KAFKA_SSL_KEYSTORE_FILENAME: kafka.keystore.jks
  #      KAFKA_SSL_KEYSTORE_CREDENTIALS: cert_creds
  #      KAFKA_SSL_KEY_CREDENTIALS: cert_creds
  #      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.truststore.jks
  #      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: cert_creds
  #      KAFKA_SSL_CLIENT_AUTH: 'required'
  #      KAFKA_SECURITY_PROTOCOL: SSL
  #      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL
  #
  #      # SSL Protocol Settings
  #      KAFKA_SSL_ENABLED_PROTOCOLS: TLSv1.2
  #      KAFKA_SSL_TRUSTSTORE_TYPE: JKS
  #      KAFKA_SSL_KEYSTORE_TYPE: JKS
  #      KAFKA_SSL_SECURE_RANDOM_IMPLEMENTATION: SHA1PRNG
  #      KAFKA_SSL_CIPHER_SUITES: ${SSL_CIPHER_SUITES}
  #      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: " "
  #      KAFKA_LISTENER_NAME_INTERNAL_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: " "
  #
  #      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:${KAFKA_PORT}
  #      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
  #      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
  #      # To avoid race condition with control-center
  #      CONFLUENT_METRICS_REPORTER_TOPIC_CREATE: 'true'
  #      CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: SSL
  #      CONFLUENT_METRICS_REPORTER_SSL_TRUSTSTORE_LOCATION: kafka.truststore.jks
  #      CONFLUENT_METRICS_REPORTER_SSL_KEYSTORE_LOCATION: kafka.keystore.jks
  #      CONFLUENT_METRICS_REPORTER_SSL_TRUSTSTORE_PASSWORD: cert_creds
  #      CONFLUENT_METRICS_REPORTER_SSL_KEYSTORE_PASSWORD: cert_creds
  #      CONFLUENT_METRICS_REPORTER_SSL_KEY_PASSWORD: cert_creds
  #      CONFLUENT_METRICS_ENABLE: "true"
  #      CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
  #    volumes:
  #      - ./secrets:/etc/kafka/secrets
  #      - ./docker/kafka-data:/var/lib/kafka/data

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"  # HOST:CONTAINER, using environment variable for Kafka port
      - "9093:9093" #For localhost (external)
      - "9094:9094" #For localhost (external) SSL
    environment:
      KAFKA_NODE_ID: 1
      CLUSTER_ID: "${KAFKA_CLUSTER_ID}"  # Must be generated using Kafka tools (see below)
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'

      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,SSL:SSL,SSL_EXTERNAL:SSL,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9093,SSL://kafka:${KAFKA_PORT},SSL_EXTERNAL://localhost:9094
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093,SSL://0.0.0.0:${KAFKA_PORT},SSL_EXTERNAL://0.0.0.0:9094,CONTROLLER://0.0.0.0:9095

      KAFKA_LOG_DIRS: '/var/lib/kafka/data/kraft-combined-logs'
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9095"  # ID@hostname:port of the brokers in the quorum
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1

      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

      # SSL settings
      KAFKA_SSL_KEYSTORE_FILENAME: kafka.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: cert_creds
      KAFKA_SSL_KEY_CREDENTIALS: cert_creds
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: cert_creds
      KAFKA_SSL_CLIENT_AUTH: 'required'
      KAFKA_SECURITY_PROTOCOL: SSL
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL

      KAFKA_SSL_ENABLED_PROTOCOLS: TLSv1.2
      KAFKA_SSL_CIPHER_SUITES: ${SSL_CIPHER_SUITES}
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: " "
      KAFKA_LISTENER_NAME_INTERNAL_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: " "
    volumes:
      - ./secrets:/etc/kafka/secrets
      - ./docker/kafka-data:/var/lib/kafka/data
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "${KAFKA_PORT}" ]  # Check if Kafka is accepting connections on port KAFKA_PORT
      interval: 10s
      retries: 5
      timeout: 5s
      start_period: 30s

  kafka-tools:
    image: confluentinc/cp-kafka:latest
    hostname: kafka-tools
    container_name: kafka-tools
    command: [ "tail", "-f", "/dev/null" ]
    network_mode: "host"

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "${SCHEMA_REGISTRY_PORT}:${SCHEMA_REGISTRY_PORT}"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: 'https://0.0.0.0:${SCHEMA_REGISTRY_PORT}'
      SCHEMA_REGISTRY_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/schema-registry.keystore.jks
      SCHEMA_REGISTRY_SSL_KEYSTORE_PASSWORD: ${SSL_SECRET}
      SCHEMA_REGISTRY_SSL_KEY_PASSWORD: ${SSL_SECRET}
      SCHEMA_REGISTRY_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/schema-registry.truststore.jks
      SCHEMA_REGISTRY_SSL_TRUSTSTORE_PASSWORD: ${SSL_SECRET}
      SCHEMA_REGISTRY_SCHEMA_REGISTRY_INTER_INSTANCE_PROTOCOL: "https"
      SCHEMA_REGISTRY_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
      SCHEMA_REGISTRY_SSL_CLIENT_AUTHENTICATION: 'NONE'
      SCHEMA_REGISTRY_DEBUG: 'true'

      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: SSL://kafka:${KAFKA_PORT}
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: SSL
      SCHEMA_REGISTRY_KAFKASTORE_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/schema-registry.keystore.jks
      SCHEMA_REGISTRY_KAFKASTORE_SSL_KEYSTORE_PASSWORD: ${SSL_SECRET}
      SCHEMA_REGISTRY_KAFKASTORE_SSL_KEY_PASSWORD: ${SSL_SECRET}
      SCHEMA_REGISTRY_KAFKASTORE_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/schema-registry.truststore.jks
      SCHEMA_REGISTRY_KAFKASTORE_SSL_TRUSTSTORE_PASSWORD: ${SSL_SECRET}
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: 3
    volumes:
      - ./secrets:/etc/kafka/secrets

  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    container_name: control-center
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "${CONTROL_CENTER_PORT}:${CONTROL_CENTER_PORT}"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka:${KAFKA_PORT}
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "https://schema-registry:${SCHEMA_REGISTRY_PORT}"
      CONTROL_CENTER_SCHEMA_REGISTRY_TLS_PROTOCOL: TLSv1.2
      CONTROL_CENTER_SCHEMA_REGISTRY_SSL_CIPHER_SUITES: ${SSL_CIPHER_SUITES}
      CONTROL_CENTER_STREAMS_SECURITY_PROTOCOL: SSL
      CONTROL_CENTER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
      CONTROL_CENTER_STREAMS_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/control-center.truststore.jks
      CONTROL_CENTER_STREAMS_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/control-center.keystore.jks
      CONTROL_CENTER_STREAMS_SSL_TRUSTSTORE_PASSWORD: ${SSL_SECRET}
      CONTROL_CENTER_STREAMS_SSL_KEYSTORE_PASSWORD: ${SSL_SECRET}
      CONTROL_CENTER_STREAMS_SSL_KEY_PASSWORD: ${SSL_SECRET}
      CONTROL_CENTER_STREAMS_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_REST_LISTENERS: "http://0.0.0.0:${CONTROL_CENTER_PORT}"
      CONTROL_CENTER_REST_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/control-center.truststore.jks
      CONTROL_CENTER_REST_SSL_TRUSTSTORE_PASSWORD: ${SSL_SECRET}
      CONTROL_CENTER_REST_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/control-center.keystore.jks
      CONTROL_CENTER_REST_SSL_KEYSTORE_PASSWORD: ${SSL_SECRET}
      CONTROL_CENTER_REST_SSL_KEY_PASSWORD: ${SSL_SECRET}
      CONTROL_CENTER_OPTS: -Djavax.net.ssl.trustStore=/etc/kafka/secrets/control-center.truststore.jks
        -Djavax.net.ssl.trustStorePassword=${SSL_SECRET}
        -Djavax.net.ssl.keyStore=/etc/kafka/secrets/control-center.keystore.jks
        -Djavax.net.ssl.keyStorePassword=${SSL_SECRET}
      PORT: ${CONTROL_CENTER_PORT}
    volumes:
      - ./secrets:/etc/kafka/secrets

  postgres-db:
    build:
      context: ./
      dockerfile: sql.Dockerfile
    environment:
      POSTGRES_DB: ${SPRING_DATASOURCE_NAME}
      POSTGRES_USER: ${SPRING_DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    ports:
      - "${POSTGRES_DB_PORT}:${POSTGRES_DB_PORT}"  # HOST:CONTAINER

  #  docker-compose exec -it mongodb bash
  mongodb:
    image: mongo:latest
    environment:
      MONGO_URI: ${MONGO_DB_HOST}           # Optional: defaults to "localhost"
      MONGO_PORT: ${MONGO_DB_PORT}               # Optional: defaults to "27017"
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_DB_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB_DATABASE}
      MONGO_DB_ROLES: ${MONGO_DB_ROLES}
    ports:
      - "${MONGO_DB_PORT}:${MONGO_DB_PORT}"  # HOST:CONTAINER
    volumes:
      - mongo_data:/data/db
      - ./init-scripts:/docker-entrypoint-initdb.d

  query-service:
    build:
      context: ./
      dockerfile: query.Dockerfile
    ports:
      - "${QUERY_SERVICE_PORT}:${QUERY_SERVICE_PORT}"
    environment:
      SPRING_PROFILES_ACTIVE: prod # set profile
      SPRING_DATA_MONGODB_HOST: mongodb
      SPRING_DATA_MONGODB_PORT: ${MONGO_DB_PORT}
      SPRING_DATA_MONGODB_USERNAME: ${MONGO_DB_USER}
      SPRING_DATA_MONGODB_PASSWORD: ${MONGO_DB_PASSWORD}
      SPRING_DATA_MONGODB_DATABASE: ${MONGO_DB_DATABASE}
      KAFKA_CONSUMER_GROUP_ID: forecast-group-query
      KAFKA_BOOTSTRAP_SERVER: SSL://kafka:${KAFKA_PORT}  # Kafka bootstrap server using the environment variable
      KAFKA_SECURITY_PROTOCOL: SSL
      KAFKA_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/consumer.keystore.jks
      KAFKA_SSL_KEYSTORE_PASSWORD: ${SSL_SECRET}  # Set a password for the keystore
      KAFKA_SSL_KEY_PASSWORD: ${SSL_SECRET}  # Set a password for the key
      KAFKA_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/consumer.truststore.jks
      KAFKA_SSL_TRUSTSTORE_PASSWORD: ${SSL_SECRET}  # Set a password for the truststore
      KAFKA_SSL_ENABLED_PROTOCOLS: TLSv1.2
      KAFKA_SSL_KEYSTORE_TYPE: JKS
      KAFKA_SSL_TRUSTSTORE_TYPE: JKS
    depends_on:
      - kafka
      - mongodb
    volumes:
      - ./secrets:/etc/kafka/secrets  # Mount the directory containing SSL certificates and keys

  write-service:
    build:
      context: ./
      dockerfile: write.Dockerfile
    ports:
      - "${WRITE_SERVICE_PORT}:${WRITE_SERVICE_PORT}"
    environment:
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_PROFILES_ACTIVE: prod # set profile
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:${POSTGRES_DB_PORT}/${SPRING_DATASOURCE_NAME}
      KAFKA_BOOTSTRAP_SERVER: SSL://kafka:${KAFKA_PORT}  # Kafka bootstrap server using the environment variable
      KAFKA_SECURITY_PROTOCOL: SSL
      KAFKA_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/producer.keystore.jks
      KAFKA_SSL_KEYSTORE_PASSWORD: ${SSL_SECRET}  # Set a password for the keystore
      KAFKA_SSL_KEY_PASSWORD: ${SSL_SECRET}  # Set a password for the key
      KAFKA_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/producer.truststore.jks
      KAFKA_SSL_TRUSTSTORE_PASSWORD: ${SSL_SECRET}  # Set a password for the truststore
      KAFKA_SSL_ENABLED_PROTOCOLS: TLSv1.2
      KAFKA_SSL_KEYSTORE_TYPE: JKS
      KAFKA_SSL_TRUSTSTORE_TYPE: JKS
    depends_on:
      - kafka
      - postgres-db
    volumes:
      - ./secrets:/etc/kafka/secrets  # Mount the directory containing SSL certificates and keys

  elasticsearch01:
    image: elasticsearch:${STACK_VERSION}
    container_name: elasticsearch01
    environment:
      - discovery.type=single-node
      - network.host=0.0.0.0
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=none
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - CLUSTER_NAME=${CLUSTER_NAME}
      - node.name=elasticsearch01
    ports:
      - "${ELASTIC_SEARCH_PORT}:${ELASTIC_SEARCH_PORT}"
    volumes:
      - elasticsearch_config:/usr/share/elasticsearch/config
    healthcheck:
      test: >
        curl -s --cacert /usr/share/elasticsearch/config/certs/ca/ca.crt https://localhost:9200/_cluster/health | grep -q '"status":"\(green\|yellow\)"'
      interval: 10s
      timeout: 10s
      retries: 12
      start_period: 20s

  search-service:
    build:
      context: ./
      dockerfile: search.Dockerfile
    ports:
      - "${SEARCH_SERVICE_PORT}:${SEARCH_SERVICE_PORT}"
    environment:
      SPRING_PROFILES_ACTIVE: prod # set profile
      ELASTIC_SEARCH_DISABLE_SSL_VERIFICATION_MODE: true
      ELASTIC_SEARCH_KEYSTORE_PATH: /usr/share/elasticsearch/config/certs/transport.p12
      ELASTIC_SEARCH_HOST: elasticsearch01
      KAFKA_CONSUMER_GROUP_ID: forecast-group-search
      KAFKA_BOOTSTRAP_SERVER: SSL://kafka:${KAFKA_PORT}  # Kafka bootstrap server using the environment variable
      KAFKA_SECURITY_PROTOCOL: SSL
      KAFKA_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/consumer.keystore.jks
      KAFKA_SSL_KEYSTORE_PASSWORD: ${SSL_SECRET}  # Set a password for the keystore
      KAFKA_SSL_KEY_PASSWORD: ${SSL_SECRET}  # Set a password for the key
      KAFKA_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/consumer.truststore.jks
      KAFKA_SSL_TRUSTSTORE_PASSWORD: ${SSL_SECRET}  # Set a password for the truststore
      KAFKA_SSL_ENABLED_PROTOCOLS: TLSv1.2
      KAFKA_SSL_KEYSTORE_TYPE: JKS
      KAFKA_SSL_TRUSTSTORE_TYPE: JKS
    depends_on:
      elasticsearch01:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./secrets:/etc/kafka/secrets  # Mount the directory containing SSL certificates and keys
      - elasticsearch_config:/usr/share/elasticsearch/config

volumes:
  mongo_data:
    driver: local
  elasticsearch_config:
    driver: local